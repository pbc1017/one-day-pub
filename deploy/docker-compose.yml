services:
  # ================================
  # MySQL 데이터베이스 (공통 설정)
  # ================================
  mysql:
    image: mysql:8.0
    container_name: ${DEPLOY_PATH:-one-day-pub}-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      timeout: 20s
      retries: 10
      interval: 30s

  # ================================
  # API 서비스 (공통 설정)
  # ================================
  api:
    image: ${DOCKER_REGISTRY}/one-day-pub-api:${IMAGE_TAG:-latest}
    container_name: ${DEPLOY_PATH:-one-day-pub}-api
    restart: unless-stopped
    environment:
      # Application Environment
      NODE_ENV: ${NODE_ENV:-production}
      API_PORT: 8000
      CORS_ORIGIN: ${CORS_ORIGIN}

      # Database Connection
      DB_HOST: ${DB_HOST:-mysql}
      DB_PORT: ${DB_PORT:-3306}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}

      # JWT & Authentication
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1h}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      REFRESH_TOKEN_EXPIRES_IN: ${REFRESH_TOKEN_EXPIRES_IN:-7d}

      # Twilio SMS
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_SERVICE_SID: ${TWILIO_SERVICE_SID}

      MAILGUN_API_KEY: ${MAILGUN_API_KEY}
      MAILGUN_DOMAIN: ${MAILGUN_DOMAIN}
      MAILGUN_FROM_EMAIL: ${MAILGUN_FROM_EMAIL}

    # depends_on 제거: MySQL은 배포 스크립트에서 별도 관리
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      timeout: 10s
      retries: 5
      interval: 30s

  # ================================
  # Web 서비스 (공통 설정)
  # ================================
  web:
    image: ${DOCKER_REGISTRY}/one-day-pub-web:${IMAGE_TAG:-latest}
    container_name: ${DEPLOY_PATH:-one-day-pub}-web
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      WEB_PORT: 3000
      HOSTNAME: 0.0.0.0
      HOST: 0.0.0.0
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
    depends_on:
      - api
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:3000/']
      timeout: 10s
      retries: 5
      interval: 30s
