name: GitOps CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

    strategy:
      matrix:
        service: [api, web]

    outputs:
      environment: ${{ steps.env.outputs.environment }}
      image-tag-api: ${{ steps.meta.outputs.image-tag-api }}
      image-tag-web: ${{ steps.meta.outputs.image-tag-web }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set environment variables
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "tag-prefix=latest" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "tag-prefix=dev" >> $GITHUB_OUTPUT
          fi

      - name: Generate image metadata
        id: meta
        run: |
          SERVICE="${{ matrix.service }}"
          REGISTRY="${{ secrets.DOCKERHUB_USERNAME }}"
          TAG_PREFIX="${{ steps.env.outputs.tag-prefix }}"

          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAGS="${REGISTRY}/one-day-pub-${SERVICE}:latest,${REGISTRY}/one-day-pub-${SERVICE}:latest-${{ github.sha }}"
            SCAN_TAG="${REGISTRY}/one-day-pub-${SERVICE}:latest-${{ github.sha }}"
            IMAGE_TAG="latest-${{ github.sha }}"
          else
            TAGS="${REGISTRY}/one-day-pub-${SERVICE}:dev,${REGISTRY}/one-day-pub-${SERVICE}:dev-${{ github.sha }}"
            SCAN_TAG="${REGISTRY}/one-day-pub-${SERVICE}:dev-${{ github.sha }}"
            IMAGE_TAG="dev-${{ github.sha }}"
          fi

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "scan_tag=${SCAN_TAG}" >> $GITHUB_OUTPUT
          echo "image-tag-${SERVICE}=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Build and push API image
        if: matrix.service == 'api'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha,scope=${{ github.ref_name }}-api,ignore-error=true
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-api,ignore-error=true
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Build and push Web image
        if: matrix.service == 'web'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            NEXT_PUBLIC_API_URL=https://${{ vars.DOMAIN }}/api
            NEXT_PUBLIC_APP_URL=https://${{ vars.DOMAIN }}
          cache-from: type=gha,scope=${{ github.ref_name }}-web,ignore-error=true
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-web,ignore-error=true
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        if: success()
        with:
          image-ref: ${{ steps.meta.outputs.scan_tag }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: success()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
          category: 'docker-${{ matrix.service }}'

  update-k8s-secrets:
    name: Apply K8s Secrets Directly
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    needs: build-and-push
    if: success()

    steps:
      - name: Apply secrets directly to cluster (Development)
        if: github.ref == 'refs/heads/dev'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            echo "üîê Applying secrets to one-day-pub-dev namespace..."
            kubectl create secret generic one-day-pub-secrets -n one-day-pub-dev \
              --from-literal=db-username='${{ secrets.DB_USERNAME }}' \
              --from-literal=db-password='${{ secrets.DB_PASSWORD }}' \
              --from-literal=mysql-root-password='${{ secrets.MYSQL_ROOT_PASSWORD }}' \
              --from-literal=jwt-secret='${{ secrets.JWT_SECRET }}' \
              --from-literal=refresh-token-secret='${{ secrets.REFRESH_TOKEN_SECRET }}' \
              --from-literal=nextauth-secret='${{ secrets.NEXTAUTH_SECRET }}' \
              --from-literal=twilio-account-sid='${{ secrets.TWILIO_ACCOUNT_SID }}' \
              --from-literal=twilio-auth-token='${{ secrets.TWILIO_AUTH_TOKEN }}' \
              --from-literal=twilio-service-sid='${{ secrets.TWILIO_SERVICE_SID }}' \
              --from-literal=mailgun-api-key='${{ secrets.MAILGUN_API_KEY }}' \
              --from-literal=mailgun-domain='${{ secrets.MAILGUN_DOMAIN }}' \
              --from-literal=mailgun-from-email='${{ secrets.MAILGUN_FROM_EMAIL }}' \
              --dry-run=client -o yaml | kubectl apply -f -
            echo "‚úÖ Development secrets applied successfully!"

      - name: Apply secrets directly to cluster (Production)
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            echo "üîê Applying secrets to one-day-pub-prod namespace..."
            kubectl create secret generic one-day-pub-secrets -n one-day-pub-prod \
              --from-literal=db-username='${{ secrets.DB_USERNAME }}' \
              --from-literal=db-password='${{ secrets.DB_PASSWORD }}' \
              --from-literal=mysql-root-password='${{ secrets.MYSQL_ROOT_PASSWORD }}' \
              --from-literal=jwt-secret='${{ secrets.JWT_SECRET }}' \
              --from-literal=refresh-token-secret='${{ secrets.REFRESH_TOKEN_SECRET }}' \
              --from-literal=nextauth-secret='${{ secrets.NEXTAUTH_SECRET }}' \
              --from-literal=twilio-account-sid='${{ secrets.TWILIO_ACCOUNT_SID }}' \
              --from-literal=twilio-auth-token='${{ secrets.TWILIO_AUTH_TOKEN }}' \
              --from-literal=twilio-service-sid='${{ secrets.TWILIO_SERVICE_SID }}' \
              --from-literal=mailgun-api-key='${{ secrets.MAILGUN_API_KEY }}' \
              --from-literal=mailgun-domain='${{ secrets.MAILGUN_DOMAIN }}' \
              --from-literal=mailgun-from-email='${{ secrets.MAILGUN_FROM_EMAIL }}' \
              --dry-run=client -o yaml | kubectl apply -f -
            echo "‚úÖ Production secrets applied successfully!"

  update-gitops-dev:
    name: Update GitOps for Development
    runs-on: ubuntu-latest
    environment: development
    needs: [build-and-push, update-k8s-secrets]
    if: success() && github.ref == 'refs/heads/dev'

    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: pbc1017/one-day-pub-k8s
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops

      - name: Update development image tags
        run: |
          cd gitops/environments/dev

          # Get image tags from build job
          API_TAG="dev-${{ github.sha }}"
          WEB_TAG="dev-${{ github.sha }}"
          REGISTRY="${{ secrets.DOCKERHUB_USERNAME }}"

          echo "Updating dev images:"
          echo "API: ${REGISTRY}/one-day-pub-api:${API_TAG}"
          echo "Web: ${REGISTRY}/one-day-pub-web:${WEB_TAG}"

          # Update only image tags using kustomize edit (preserves existing structure)
          kustomize edit set image \
            chansparcs/one-day-pub-api=${REGISTRY}/one-day-pub-api:${API_TAG} \
            chansparcs/one-day-pub-web=${REGISTRY}/one-day-pub-web:${WEB_TAG}

          echo "‚úÖ Image tags updated in kustomization.yaml"
          cat kustomization.yaml

      - name: Commit and push changes
        run: |
          cd gitops

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "üöÄ chore(dev): update images to dev-${{ github.sha }}
            
            - API: ${{ secrets.DOCKERHUB_USERNAME }}/one-day-pub-api:dev-${{ github.sha }}
            - Web: ${{ secrets.DOCKERHUB_USERNAME }}/one-day-pub-web:dev-${{ github.sha }}
            - Secrets: Updated from GitHub Actions
            - Trigger: ${{ github.actor }} pushed to ${{ github.ref_name }}
            - Commit: ${{ github.sha }}"
            
            git push origin main
            echo "‚úÖ Development GitOps repository updated successfully!"
          fi

  update-gitops-prod:
    name: Update GitOps for Production (PR)
    runs-on: ubuntu-latest
    environment: production
    needs: [build-and-push, update-k8s-secrets]
    if: success() && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: pbc1017/one-day-pub-k8s
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops

      - name: Create production update branch
        run: |
          cd gitops

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          BRANCH_NAME="update-prod-${{ github.sha }}"
          git checkout -b "${BRANCH_NAME}"

          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_ENV

      - name: Update production image tags
        run: |
          cd gitops/environments/prod

          # Get image tags from build job
          API_TAG="latest-${{ github.sha }}"
          WEB_TAG="latest-${{ github.sha }}"
          REGISTRY="${{ secrets.DOCKERHUB_USERNAME }}"

          echo "Updating prod images:"
          echo "API: ${REGISTRY}/one-day-pub-api:${API_TAG}"
          echo "Web: ${REGISTRY}/one-day-pub-web:${WEB_TAG}"

          # Update only image tags using kustomize edit (preserves existing structure)
          kustomize edit set image \
            chansparcs/one-day-pub-api=${REGISTRY}/one-day-pub-api:${API_TAG} \
            chansparcs/one-day-pub-web=${REGISTRY}/one-day-pub-web:${WEB_TAG}

          echo "‚úÖ Image tags updated in kustomization.yaml"
          cat kustomization.yaml

      - name: Commit changes and create PR
        run: |
          cd gitops

          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "üöÄ chore(prod): update images to latest-${{ github.sha }}
            
            - API: ${{ secrets.DOCKERHUB_USERNAME }}/one-day-pub-api:latest-${{ github.sha }}
            - Web: ${{ secrets.DOCKERHUB_USERNAME }}/one-day-pub-web:latest-${{ github.sha }}
            - Secrets: Updated from GitHub Actions
            - Trigger: ${{ github.actor }} pushed to ${{ github.ref_name }}
            - Commit: ${{ github.sha }}"
            
            git push origin "${{ env.branch_name }}"
            
            # Install GitHub CLI if not available
            if ! command -v gh &> /dev/null; then
              curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
              sudo apt update
              sudo apt install gh
            fi
            
            # Create PR
            export GH_TOKEN="${{ secrets.GITOPS_TOKEN }}"
            gh pr create \
              --title "üöÄ Deploy to Production - ${{ github.sha }}" \
              --body "## üöÄ Production Deployment Request

            **Triggered by:** ${{ github.actor }}  
            **Source:** ${{ github.ref_name }} ‚Üí ${{ github.sha }}  
            **Images:**
            - \`${{ secrets.DOCKERHUB_USERNAME }}/one-day-pub-api:latest-${{ github.sha }}\`
            - \`${{ secrets.DOCKERHUB_USERNAME }}/one-day-pub-web:latest-${{ github.sha }}\`

            **Changes:**
            - Updated Kubernetes manifests for production environment
            - Updated secrets from GitHub Actions
            - Ready for manual review and deployment

            **Next Steps:**
            1. ‚úÖ Review changes in this PR
            2. ‚úÖ Merge this PR when ready to deploy
            3. ‚úÖ Manually sync in ArgoCD UI
            4. ‚úÖ Verify deployment in production

            ---
            *This PR was automatically created by GitHub Actions*" \
              --head "${{ env.branch_name }}" \
              --base main
              
            echo "‚úÖ Production deployment PR created successfully!"
          fi

  notify:
    name: Notify GitOps Pipeline Result
    runs-on: ubuntu-latest
    needs: [build-and-push, update-gitops-dev, update-gitops-prod]
    if: always()

    steps:
      - name: Set notification variables
        id: vars
        run: |
          OVERALL_STATUS="success"

          # Check each job status
          if [ "${{ needs.build-and-push.result }}" != "success" ]; then
            OVERALL_STATUS="failed"
          elif [ "${{ github.ref }}" == "refs/heads/dev" ] && [ "${{ needs.update-gitops-dev.result }}" != "success" ]; then
            OVERALL_STATUS="failed"
          elif [ "${{ github.ref }}" == "refs/heads/main" ] && [ "${{ needs.update-gitops-prod.result }}" != "success" ]; then
            OVERALL_STATUS="failed"
          fi

          if [ "$OVERALL_STATUS" = "success" ]; then
            STATUS_KR="ÏÑ±Í≥µ"
            STATUS_EMOJI="‚úÖ"
            STATUS_COLOR="good"
          else
            STATUS_KR="Ïã§Ìå®"
            STATUS_EMOJI="‚ùå"
            STATUS_COLOR="danger"
          fi

          ENVIRONMENT="${{ github.ref == 'refs/heads/main' && 'Ïö¥ÏòÅÌôòÍ≤Ω' || 'Í∞úÎ∞úÌôòÍ≤Ω' }}"

          echo "overall_status=${OVERALL_STATUS}" >> $GITHUB_OUTPUT
          echo "status_kr=${STATUS_KR}" >> $GITHUB_OUTPUT
          echo "status_emoji=${STATUS_EMOJI}" >> $GITHUB_OUTPUT
          echo "status_color=${STATUS_COLOR}" >> $GITHUB_OUTPUT
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT

      - name: Notify Slack
        if: vars.SLACK_WEBHOOK_URL != ''
        run: |
          # Build deployment message based on environment
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            DEPLOYMENT_MSG="üìã Ïö¥ÏòÅÌôòÍ≤Ω Î∞∞Ìè¨Î•º ÏúÑÌïú PRÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§"
            ACTION_MSG="üë§ Îã¥ÎãπÏûêÎäî PRÏùÑ Í≤ÄÌÜ† ÌõÑ Î®∏ÏßÄÌïòÎ©¥ ÏûêÎèô Î∞∞Ìè¨Îê©ÎãàÎã§ üöÄ"
          else
            DEPLOYMENT_MSG="üöÄ Í∞úÎ∞úÌôòÍ≤ΩÏóê ÏûêÎèô Î∞∞Ìè¨ÎêòÏóàÏäµÎãàÎã§"
            ACTION_MSG="üîÑ ArgoCDÍ∞Ä ÏûêÎèôÏúºÎ°ú ÎèôÍ∏∞ÌôîÌï©ÎãàÎã§"
          fi

          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"attachments\": [{
                \"color\": \"${{ steps.vars.outputs.status_color }}\",
                \"title\": \"${{ steps.vars.outputs.status_emoji }} GitOps CI/CD ${{ steps.vars.outputs.status_kr }}\",
                \"fields\": [
                  {\"title\": \"ÌôòÍ≤Ω\", \"value\": \"${{ steps.vars.outputs.environment }}\", \"short\": true},
                  {\"title\": \"Î∏åÎûúÏπò\", \"value\": \"${{ github.ref_name }}\", \"short\": true},
                  {\"title\": \"Ïª§Î∞ã\", \"value\": \"${{ github.sha }}\", \"short\": true},
                  {\"title\": \"ÏûëÏÑ±Ïûê\", \"value\": \"${{ github.actor }}\", \"short\": true},
                  {\"title\": \"ÏÉÅÌÉú\", \"value\": \"${DEPLOYMENT_MSG}\", \"short\": false},
                  {\"title\": \"Îã§Ïùå Îã®Í≥Ñ\", \"value\": \"${ACTION_MSG}\", \"short\": false}
                ],
                \"footer\": \"One Day Pub GitOps Pipeline\",
                \"ts\": $(date +%s)
              }]
            }" \
            "${{ vars.SLACK_WEBHOOK_URL }}"
